def MatchingProblem(text, pattern):
    positions = []
    lentext=len(text)
    lenpattern = len(pattern)
    for i in range(lentext - lenpattern):
        if text[i:i+lenpattern] == pattern:
            positions.append(i)
    return positions

text = "TCCTAGCCGCTAGCCGCTAGCCGTTGCTAGCCGGGCACCTAGCCGCCATAGTTTCTAGCCGGTCTAGCCGAGTCTAGCCGCTAGCCGGCTAGCCGTCCCTCTAGCCGCCTAGCCGCTAGCCGTACTAGCCGCTAGCCGCTAGCCGTGGCTAGCCGCTAGCCGGTACCTAGCCGAAAAGCTAGCCGCTAGCCGGTCCTAGCTAGCCGACTAGCCGCCTAGCCGCCCTAGCCGACTTCCCCTAGCCGCTAGCCGCTAGCCGTGCTAGCCGCCCCTGCCTAGCCGGGCTAGCCGCGCTGAGCTAGCCGCTAGCCGCCACCTAGCCGGAACCGCCTAGCCGCTAGCCGTCTAGCCGCTAGCCGTTACTCCTAGCCGCCTTCTAGCCGGCTAGCCGCTAGCCGCTAGCCGTGGTCCTAGCCGCTCTAGCCGGTCTCTAGCCGCTAGCCGCTAGCCGAGAGTCAGATCTAGCCGCGCTAGCCGACCATCCTCACTAGCCGCTAGCCGACTAGCCGTCTAGCCGGACTAGCCGACTAGCCGGGCATTCTCTCGCTAGCCGAACAACCTAGCCGCTAGCCGCTAGCCGAACTAGCCGTGCTAGCCGGGTTACTAGCCGCACTCTAGCCGCTAGCCGTACTAGCCGTGGCTAGCCGTCACTAGCCGCTAGCCGTTGTCCTAGCCGACCGACCTAGCCGCTAGCCGAGAAAACGACTAGCCGCCGGGGCTAGCCGGCTAGCCGTCGCTAGCCGAGCTAGCCGCCTAGCCGTTCTAGCCGCTAGCCGACCTCTAGCCGCCTAGCCGTACTACTAGCCGCGCACTAGCCGCTAGCCGGCTAGCCGTGTCTAGCCGAGATCTCTAGCCGGTTTCTAGCCGCTAGCCGCTCTAGCCGGTATTACACTAGCCGTCTAGCCGCTAGCCGGCAACCTAGCCGCTAGCCGACTAGCCGCGCTAGCCGTCGAACTAGCCGGTCCTAGCCGAGGCTAGCCGAGCTAGCCGCTAGCCGTAGCACGTCCTAGCCGCTAGCCGAACTCTAGCCGGGCTAGCCGCTAGCCGTACCTAGCCGGCCTAGCCGGACACTAGCCGTGGTGTCTAGCCGACGCCATGCGAGGCTAGCCGACTCCTAGCCGCTAGCCGATTTACCTTTCAAGCCTAGCCGTGTTGCCTAGCCGACTAGCCGTCCTTACTAGCCGGATACACTAGCCGAACACGCCGTCTAGCCGGGGTCTAGCCGCCTAGCCGGGCACTAGCCGCCCTAGCCGCTAGCCGCTAGCCGCTAGCCGCACTAGCCGGGGACTTTTTCTAGCCGTCTAGCCGCTAGCCGCTAGCCGCTAGCCGACTAGCCGGTGCTAGCCGTCTAGCCGCTAGCCGGTCTAGCCGCCTAGCCGCTAGCCGTATTTCCAGCCTAGCCGTCCTAGCCGCTAGCCGATCTAGCCGAGTACTAGCCGATTAGGACTAGCCGCTAGCCGAGCAGGTCATCTAGCCGTTCCCCTAGCCGTGAAAGTCCTAGCCGACTAGCCGTCTAGCCGTAGGTCTAGCCGTGCCTAGCCGATAGCTAGCCGAACTAGCCGGCTAGCCGACTAGCCGACCTCTCTAGCCGCCCTAGCCGAGCCATCTAGCCGTCGTACCTAGCCGCCTAGCCGACTATCATATGTCTAGCCGGGCTAGCCGTCTAGCCGCTAGCCGTCGTCTAGCCGCTAGCCGACACTAGCCGCTCTAGCCGGGCTAGCCGTCCTAGCCGCTAGCCGCTGCTAGCCGGACTAGCCGTGTTCTAGCCGGTCTAGCCGTAGCTAGCCGACTAGCCGTCCTAGCCGCTAGCCGGTCTGGACAGAGCTAGCCGGATGGTCTAGCCGTGTCTAGCCGACCGCTAGCCGCACCAGCGCTAGCCGGTCCTAGCCGCTAGCCGCTAGCCGGTCTAGCCGACTAGCCGAACCTAGCCGGGCTAGCCGGTGGCTAGCCGACGCTAGCCGCTAGCCGCTAGCCGACTAGCCGTACTAGCCGCCTAGCCGTTACTAGCCGATCAACTAGCCGTAGGTGGTCTAGCCGCTAGCCGGAGTTACTAGCCGGTGACTCGTCTCTGACTAGCCGCTAGCCGCTAGCCGTTCTTCCCTAGCCGCCCTAGCCGCCCTCTAGCCGGCTAGCCGCCTAGCCGCTAGCCGGTAACAGCACTAGCCGCTAGCCGGTTCTAGCCGCCCACTGCTAGCCGTAATCTAGCCGCCTATCCAACTAGCCGCGCTAGCCGCCATCGTCTACTAGCCGAGGCTAGCCGCCTAGCCGCAGACATTATCACTAGCCGCTAGCCGTTCCAGCTAGCCGCTAGCCGGACTAGCCGTTACCGCTCACTAGCCGCGAGCTAGCCGGCTAGCCGGACTAGCCGCATTTTGCTAGCCGCTAGCCGGTTCGTCCTAGCCGGAGTGTCGGCTAGCCGATCTAGCCGCGCTAGCCGCGCTTTTTCTAGCCGCTAGCCGGGCTAGCCGCTCTAGCCGATGCTAGCCGTTCTAGCCGCTAGCCGAGATTCCTAGCCGGCTAGCCGACTAGCCGCTAGCCGAACCATACTAGCCGCTAGCCGCTAGCCGAGCTAGCCGCTAGCCGCTAGCCGCTAGCCGCTAGCCGCAACTAGCCGCTAGCCGGCTAGCCGGCTAGCCGCCTAGCCGCTAGCCGACTAGCCGAGCTAGCCGGGGCCCTAGCCGTCGAAAGCTAGCCGTGTGGCTAGCCGGACCTAGCCGCTAGCCGCGTCTAGCCGCTAGCCGGCTAGCCGGGCTAGCCGCTAGCCGTTTCTAGCCGTCTAGCCGCCTAGCCGCTAGCCGCTAGCCGAGCTAGCCGCTAGCCGCACGCTAGCCGTCTAGCCGCTAGCCGTCTAGCCGCCACTAGCCGCTAGCCGCTAGCCGCTAGCCGCTAGCCGCTAGCCGGAACTAGCCGTAACTAGCCGGCCTAGCCGAGGCTCTAGCCGAATTAACCTAGCCGACTAGCCGAACTAGCCGAGTATAATCCTCTAGCCGCTAGCCGCTAGCCGTCTGCCAGGTAGCTAGCCGCTAGCCGCCTAGCCGACCTAGCCGTTAGGTACTAGCCGCCTAGCCGGTCTAGCCGCTAGCCGCTAGCCGCTAGCCGGACTAGCCGGCTAGCCGCTAGCCGTGTCTAGCCGGGCTAGCCGGCTAGCCGCTAGCCGACCTAGCCGCTAGCCGCGTCTAGCCGCCGGCTAGCCGTCTAGCCGAATGGCCCACTAGCCGTGCCCTAGCCGCTAGCCGGACTCCCTAGCCGCCTAGCCGACTAGCCGTGCTAGCCGTGCAGTCAAGCTAGCCGCTAGCCGATCTAGCCGACTAGCCGCTAGCCGCTATCCGCTAGCCGCGGTCTAGCCGAATTCTAGCCGTAGCTAGCCGTGTCACTAGCCGGGGCACTAGCCGTACTCTAGCCGCACTAGCCGCCCTAGCCGCGTGCTAGCCGGTACCTAGCCGTCTTACTAGCCGAGCTAGCCGCCTAGCCGATAGCATCTAGCCGCTAGCCGTCGCAGGCTAGCCGCCCCTAGCCGAAGCATTGATACTAGCCGCTAGCCGCCTAGCCGATGGAAGCTAGCCGCTAGCCGTCTGTAAACTAGCCGGGATCCTAGCCGTGAATGTTTTACTCCACCTAGCCGCTAGCCGCACTAGCCGCACACTAGCCGCCTAGCCGTCTAGCCGCTAGCCGTCGGTGTCTAGCCGAGCTAGCCGTGCTAGCCGGTCTAGCCGCTAGCCGGCTAGCCGCTAGCCGACATCTAGCCGTCTAGCCGACTAGCCGCCGCTAGCCGCTAGCCGTCTAGCCGTCTAGCCGTTGCTAGCCGGCTAGCCGAGCTAGCCGCTAGCCGTTCTAGCCGACTAGCCGACTAGCCGTCTAGCCGGGGCTAGCCGGCTAGCCGTTCCGTACCTAGCCGGGTTCTAGCCGCCACCTAGCCGACTAGCCGACTAGCCGTGTCTAGCCGCCCTAGCCGCTAGCCGGCTAGCCGCAGGGAGCTGTCTAGCCGTGTTCCTGTCCTAGCCGAAGCTAGCCGGCCTAGCCGCTAGCCGCTAGCCGAACTAGCCGACCTAGCCGGCTAGCCGCTAGCCGAACGACTAGCCGCTAGCCGCTAGCCGATCTAGCCGCTAGCCGACCCTAGCCGGCTAGCCGCTAGCCGGGCCCTAGCCGCTAGCCGTTCTAGCCGACTAGCCGAAATGCCACTAGCCGCACCTCTAGCCGTACTAGCCGTGGGCGCTAGCCGTCTAGCCGCTAGCCGGCTAGCCGCCTAGCCGATTTCTAGCCGAATTACTAGCCGTAGCTAGCCGTACTAGCCGCTGGGAAGCCTAGCCGGTCCCGTCCTGCTAGCCGGCGCCTCTAGCCGCTAGCCGATTTCTAGCCGGGAAGGATGCTAGCCGGGGCTAGCCGTCACTAGCCGGCCCTAGCCGCTAGCCGCTAGCCGGCCCTAGCCGAACTCGCTAGCCGTCTAGCCGTGCTAGCCGTCTAGCCGAAGTGTCTAGCCGTTCCTAGCCGCTAGCCGCTAGCCGCTAGCCGCTAGCCGACTAGCCGGACCCCACTAGCCGCTAGCCGGCCTAGCCGTGGCTAGCCGCGCTTGGACAGTCTAGTCATCTAGCCGCTAGCCGCTAGCCGCTAGCCGTCCTAGCCGCCTAGCCGTCTAGCCGGATCTAGCCGCGAACGAGGCTAGCCGCTAGCCGCGAACCCTAGCCGTTTTGCCTAGCCGTGCGGCTAGCCGGCTAGCCGGCTAGCCGCTAGCCGACTAGCCGGGTCTCTAGCCGCACTAGCCGCTAGCCGCTAGCCGCCCCCAGGTATTCCTCCTAGCCGCGGCTAGCCGCCTAGCCGACCCTTTCTAGCCGTCTAGCCGACTGGCCCTAGCCGCTAGCCGTCTAGCCGTCACTAGCCGGACTAGCCGGCACTAGCCGAGCTAGCCGTCGCTAGCCGGTCGCTAGCCGAAGCTAGCCGCTAGCCGCCGCTAGCCGGCTAGCCGCTAGCCGTTTGCGCTAGCCGCTAGCCGCTAGCCGGTTGCTAGCCGGAGTTCTAGCCGTCTAGCCGGTTCGCCCTCATCGGTGAGCTAGCCGCCTAGCCGTCGCTAGCCGCTTCTAGCCGGCTAGCCGCGGCTAGCCGTCGAGACTAGCCGGAACTAGCCGAGCTAGCCGGTAGCTAGCCGGAAGCGGGTAGACTAGCCGTTGGAGATCTAGCCGTTCTAGCCGCCTAGCCGGTAGCACCTAGCCGTGTTCTAGCCGCTAGCCGCTAGCCGGCTAGCCGAGGACCCGCTAGCCGCCTAGCCGATAGACTAGCCGCTAGCCGTACGCTAGCCGATTGCTAGCCGTTCCTAGCCGCTAGCCGTGCTAGCCGCGCTAGCCGCTAGCCGCCGGCTAGCCGGCTAGCCGCTAGCCGCTAGCCGCCTAGCCGATGGCTAGCCGGGGCTAGCCGCTAGCCGACAGACTAGCCGGAGGACTAGCCGAACTAGCCGAGCTAGCCGCGCTAGCCGACCTAGCCGCTAGCCGAAGCTAGCCGCGCGCTAGCCGCTAGCCGACTAGCCGCCTAGCCGCTAGCCGCTAGCCGTTTGTCTAGCCGGCTCCTAGCCGGGAGCTAGCCGACCTAGCCGAAAATCAACCGTAATCTAGCCGTGGCTAGCCGTGATCCTAGCCGGCTAGCCGCCTAGCCGTATTCTAGCCGACGCTAGCCGTCTAGCCGTGCTAGCCGCCGCACTAGCCGCTAGCCGGCTAGCCGCTAGCCGTCCTAGCCGTTTGCTAGCCGATACTAGCCGGTCTAGCCGATGTCTAGCCGAACGGCTAGCCGTCTAGCCGGAACGCTAGCCGCTAGCCGACTAGCCGCTAGCCGCTCTAGCCGCTAGCCGGCGATTCTTGAACAGGCGCTAGCCGAAACTAGCCGCACATGTCCTAGCCGCTAGCCGACTCTAGCCGTCTAGCCGTAGGCTAGCCGGGCGAACTAGCCGAGCCTAGCCGCCTAGCCGTCTAGCCGGCTAGCCGTGGCTAGCCGCTGGCTAGCCGGACTCTAGCCGGTAGCCTGGATGGCTAGCCGTCTAGCCGCTAGCCGGACTAGCCGCTAGCCGCTAGCCGTCCTAGCCGCGCAATACAATGTAACTAGCCGACCCTAGCCGCTCTAGCCGGCTGAGAATCTAGCCGCAACATCCCCTAGCCGGCTAGCCGGATCGCTAGCCGCTGCCGGACGCTAGCCGGCTAGCCGCTAGCCGTTCGCTAGCCGCTAGCCGTACTAGCCGCTAGCCGCTAGCCGCCTCCACTAGCCGCTAGCCGTCCTACTAGCCGCTAGCCGCACCTAGCCGAAGTGACTAGCCGCTAGCCGCTAGCCGCAGCTAGCCGTCCATGCACTAGCCGCTGGCTAGCCGGATGGCTAGCCGGGGGGCTAGCCGACCTATCCTAGCCGAGACTAGCCGCCTAGCCGCTAGCCGGCTAGCCGGCTAGCCGCTAGCCGTCCGCTAGCCGCTAGCCGCCTAGCCGGCTAGCCGCTAGCCGCTAGCCGCCTAGCCGTCTCTCTAGCCGGCTAGCCGCCTAGCCGTGCAGACTAGCCGACAGCTAGCCGCCTAGCCGGCTAGCCGGAGGCCTAGCCGAACTCCTAGCCGTCCTAGCCGCTAGCCGTCTAGCCGGTTGCTAGCCGCTAGCCGCTAGCCGGTGTCTTTCTAGCCGTACTAGCCGGCTCTAGCCGCTAGCCGCCTAGCCGCTAGCCGCTAGCCGGCTAGCCGCCTGTGCCCATCTAGCCGTATACTAGCCGCTAGCCGTCTAGCCGACCTAGCCGAACCTAGCCGTACGCTAGCCGGCTAGCCGCTAGCCGCTAGCCGCTAGCCGTTCCTAGCCGCACACTAGCCGAAGGATAGCTAGCCGCGCCAGGTTCAGTCTAGCCGTCTAGCCGCCTAGCCGCTAGCCGGCTAGCCGCCTAGCCGCTAGCCGTCTAGCCGTCTAGCCGGCATTCTAGCCGCGGCATTTCACTAGCCGGCGAGCTAGCCGAGGGCTAGCCGACTAGCCGACTAGCCGGCTAGCCGCTCCTAGCCGACTAGCCGAACTAGCCGGCCTAGCCGCCTAGCCGCGCTAGCCGATCGGGTCGCTAGCCGCTAGCCGCCTAGCCGACTAGCCGCCCTAGCCGGCGCTAGCCGTGAGATCCTAGCCGCATCTAGCCGCCAATACGTCTAGCCGGGCTAGCCGGCTAGCCGTGGTCGCCTAGCCGACCTAGCCGGCTAGCCGTTTCCCACTAGCCGCTAGCCGGGAACCTAGCCGCTAGCCGCTAAGTCTAGCCGCTAGCCGCTAGCCGGACTAGCCGTGGGATTCTAGCCGGTCTAGCCGCCTAGCCGGACGATACTAGCCGACTAGCCGTGCCTAGCCGGCTAGCCGGCTAGCCGCGTCTAGCCGAAGGCATCCTAGCCGCTAGCCGAAGCTAGCCGATATATCCCCTAGCCGGCTATACTAGCCGAAATGCCACCTAGCCGATTGCTAGCCGATGCCTAGCCGGTACTTGCTAGCCGCTTCTAGCCGTCGGACCTAGCCGCCTAGCCGGACTAGCCGACCCACTAGCCGGACCCTAGCCGTTGCTAGCCGGGCCTAGCCGGGCCAAGAACCACCTCTAGCCGCCTAGCCGTCCGCCCTAGCCGTCACTTCTCCTAGCCGCACACCTAGCCGGCGGGTACGCCTTCCTAGCCGAACTAGCCGCTAGCCGCTAGCCGCCTTCGCACTAGCCGGGCTAGCCGCCTAGCCGCTAGCCGCCTAGCCGGCTAGCCGACTAGCCGCTAGCCGTCTAGCCGCGGCTGAGGGACCTAGCCGCTAGCCGCTAGCCGCGCCACTAGCCGCCTAGCCGGCATCCTAGCCGTCTAGCCGACTAGCCGTCTAGCCGCGCTAGCCGGCCTAGCCGAAAACTAGCCGGCTAGCCGATAGTACTAGCCGCTAGCCGGCCTAGCCGGTATGCTAGCCGGGAAGTCTAGCCGATTCTACTAGCCGACTAGCCGATACTAGCCGGTGCCTAGCCGTTGTGCTTGTTCTCTAGCCGGACTAGCCGTCACTAGCCGCCCTACTAGCCGATCTCTAGCCGCCTAGCCGCTAGCCGCACTAGCCGCTAGCCGCCTAGCCGTTACACTAGCCGGCTAGCCGCCTTATGCTAGCCGCTAGCCGTGCTAGCCGTGCTAGCCGGCTAGCCGCACTCTAGCCGGTGCTAGCCGCTAGCCGGCCCCCTAGCCGCTACCTAGCCGGAACTAGCCGCGTCGTACTAGCCGCTAGCCGCACTAGCCGTCTAGCCGGAGCTAGCCGGTACTAGCCGTAGCTAGCCGTCTAGCCGGTTGTGGTCCTAGCCGCTAGCCGAACTCACGACTAGCCGCTAGCCGCGAGAACTAGCTAGCCGCTAGCCGTATGCCTAGCCGCTAGCCGCTTCTAGCCGCTAGCCG"
pattern = "CTAGCCGCT"
data = MatchingProblem(text, pattern)
print(" ".join(str(x) for x in data))

